Buildroot is a simple, efficient and easy-to-use tool to generate embedded
Linux systems through cross-compilation.

The documentation can be found in docs/manual. You can generate a text
document with 'make manual-text' and read output/docs/manual/manual.text.
Online documentation can be found at http://buildroot.org/docs.html

To build and use the buildroot stuff, do the following:

1) run 'make menuconfig'
2) select the target architecture and the packages you wish to compile
3) run 'make'
4) wait while it compiles
5) find the kernel, bootloader, root filesystem, etc. in output/images

You do not need to be root to build or run buildroot.  Have fun!

Buildroot comes with a basic configuration for a number of boards. Run
'make list-defconfigs' to view the list of provided configurations.

Please feed suggestions, bug reports, insults, and bribes back to the
buildroot mailing list: buildroot@buildroot.org
You can also find us on #buildroot on Freenode IRC.

If you would like to contribute patches, please read
https://buildroot.org/manual.html#submitting-patches
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <linux/sched.h>
#include <semaphore.h>

int nthread;
int indice;
int politica;
int prioridade;
int buffersize;
char * buffer;
char chars[23];
int wait =0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
sem_t go;
pthread_mutex_t mut = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
void *run(void *data)
{
    
	int id = (int) data;
    printf("Thread %d Meu char e esse %c\n",id,chars[id]);
	pthread_mutex_lock(&mut);
	
		pthread_cond_wait(&cond, &mut);
		pthread_mutex_unlock(&mut);
	
	//pthread_cond_wait(&cond);
    while(indice<buffersize){
        //inic secao critica
        pthread_mutex_lock(&mutex);
        buffer[indice]=chars[id];
        indice++;
        //finaliza secao critica
        pthread_mutex_unlock(&mutex);
    }
    return 0;
}

void print_sched(int policy)
{
	int priority_min, priority_max;

	switch(policy){
		case SCHED_DEADLINE:
			printf("SCHED_DEADLINE");
			break;
		case SCHED_FIFO:
			printf("SCHED_FIFO");
			break;
		case SCHED_RR:
			printf("SCHED_RR");
			break;
		case SCHED_NORMAL:
			printf("SCHED_OTHER");
			break;
		case SCHED_BATCH:
			printf("SCHED_BATCH");
			break;
		case SCHED_IDLE:
			printf("SCHED_IDLE");
			break;
		default:
			printf("unknown\n");
	}
	priority_min = sched_get_priority_min(policy);
	priority_max = sched_get_priority_max(policy);
	printf(" PRI_MIN: %d PRI_MAX: %d\n", priority_min, priority_max);
}

int setpriority(pthread_t *thr, int newpolicy, int newpriority)
{
	int policy, ret;
	struct sched_param param;
	
	if (newpriority > sched_get_priority_max(newpolicy) || newpriority < sched_get_priority_min(newpolicy)){
		printf("Invalid priority: MIN: %d, MAX: %d", sched_get_priority_min(newpolicy), sched_get_priority_max(newpolicy));

		return -1;
	}

	pthread_getschedparam(*thr, &policy, &param);
	printf("current: ");
	print_sched(policy);

	param.sched_priority = newpriority;
	ret = pthread_setschedparam(*thr, newpolicy, &param);
	if (ret != 0)
		perror("perror(): ");

	pthread_getschedparam(*thr, &policy, &param);
	printf("new: ");
	print_sched(policy);

	return 0;
}

int main(int argc, char **argv)
{
 
	pthread_t thr[nthread];
	

	if (argc < 5){
		printf("usage: ./%s <nthread<=4> <execution_time>\n\n", argv[0]);

		return 0;
	}
	
    nthread=atoi(argv[1]);
    buffersize=atoi(argv[2]);
    //recebe o tamanho
    politica=atoi(argv[3]);
    prioridade=atoi(argv[4]);
	buffer = (char *) malloc(buffersize*sizeof(char));//aloca
	memset(buffer,0,buffersize);//inicializa

	//pthread_cond_init(&cond); 
	
	//setpriority(&thr, SCHED_RR, 1);
	
	int i;
	for(i=0;i<23;i++){
		chars[i]=65+i;
	}
	
	for(i=0;i<nthread;i++){
	    
		pthread_create(&thr[i], NULL,run,(void *)i);
		setpriority(&thr[i], politica, prioridade+i);	
		
	}
	wait=1;
	pthread_cond_broadcast(&cond);
	
	
	for(i=0;i<nthread;i++){
		pthread_join(thr[i], NULL);
	}
	
	//printf("%s \n", buffer);
    i=0;
    char curr;
    int cont[nthread];
	for(i=0;i<nthread;i++){
		cont[i]=0;
	}
    while(i<indice){
        if(buffer[i]!=curr){
            cont[buffer[i]-65]+=1;
            printf("%c",buffer[i]);            
        }
        curr=buffer[i];
        i++;
    }
	printf("\n\n");
	for(i=0;i<nthread;i++){
    	printf("%c=%d\n",(i+65),cont[i]);
	}
	return 0;
}
